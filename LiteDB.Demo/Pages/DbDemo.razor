@page "/db-demo"
@inject ILiteEngine _db;

<h1>LiteDB for Blazor WebAssembly</h1>

<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="OpenDatabase">Open Database</button>
<button class="btn btn-primary" hidden="@(_db.IsOpen)" @onclick="InsertPerson">Insert</button>
<button class="btn btn-primary" hidden="@(_db.IsOpen)" @onclick="QueryCollection">Query All</button>
<button class="btn btn-primary" hidden="@(_db.IsOpen)" @onclick="Drop">Drop Database</button>

<pre class="log">@_log.ToString()</pre>

@code {

    private readonly StringBuilder _log = new StringBuilder();
    private readonly Random _rnd = new Random();

    private async Task OpenDatabase()
    {
        await _db.OpenAsync();

        _log.AppendLine("database opened");
    }

    private async Task Drop()
    {
        _db.Dispose();
        _db = null;
    }

    private async Task InsertPerson()
    {
        var person = new BsonDocument { ["Name"] = "John Doe " + Guid.NewGuid(), ["Age"] = _rnd.Next(10, 90) };

        await _db.InsertAsync("col1", new[] { person }, BsonAutoId.Guid);

        _log.AppendLine($"inserted new person: {person}");
    }

    private async Task QueryCollection()
    {
        var query = new Query(); // all
        var result = await _db.QueryAsync("col1", query);

        _log.AppendLine("query results");

        await foreach (var person in result.ToAsyncEnumerable())
        {
            _log.AppendLine($"  - {(person?.ToString() ?? "null")}");
        }
    }
}
